#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
x-superset-image: &superset-image apache/superset:${SOFTWARE_VERSION_TAG}
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes:
  &superset-volumes # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - ./superset_home:/app/superset_home
version: "3.7"
services:
  traefik:
    image: traefik:v3.1
    restart: always
    command:
      - "--providers.docker=true" # Enable Docker as a provider
      - "--entrypoints.web.address=:80" # Entry point for HTTP traffic
      - "--entrypoints.websecure.address=:443" # Entry point for HTTPS traffic (optional)
      - "--providers.docker.exposedByDefault=false" # Disable exposing services by default
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true" # Enable TLS challenge (optional for HTTPS)
      - "--certificatesresolvers.myresolver.acme.email=support@octabyte.io" # Email for SSL certs (optional)
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Path to store certs (optional)
    ports:
      - "80:80" # Traefik listening on port 80
      - "443:443" # Traefik listening on port 443 (for HTTPS)
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # To interact with Docker
      - "./letsencrypt:/letsencrypt" # For SSL certificate storage (optional)

  redis:
    image: redis:latest
    container_name: superset_cache
    restart: always
    volumes:
      - ./redis:/data

  db:
    env_file: ./.env
    container_name: superset_db
    image: postgres:14
    restart: always
    volumes:
      - ./db_home:/var/lib/postgresql/data

  superset:
    env_file: ./.env
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: always
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${APP_URL}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=8088"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend.entrypoints=websecure"

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: ./.env
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: ./.env
    restart: always
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: ./.env
    restart: always
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
volumes:
  redis:
    external: false
